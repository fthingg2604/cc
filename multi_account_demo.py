#!/usr/bin/env python3
"""
Multi-Account Bot Demo - Test t√≠nh nƒÉng multiple accounts
"""

import json
import logging
from account_manager import AccountManager, create_sample_accounts_file
from multi_account_bot import MultiAccountBot

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def demo_multi_account():
    """Demo t√≠nh nƒÉng multiple accounts"""
    
    print("üöÄ WPlace Multi-Account Bot Demo")
    print("=" * 50)
    
    # T·∫°o file accounts m·∫´u n·∫øu ch∆∞a c√≥
    try:
        manager = AccountManager()
        if len(manager.accounts) == 0:
            print("üìù T·∫°o file accounts.json m·∫´u...")
            create_sample_accounts_file()
            manager.load_accounts()
    except Exception as e:
        print(f"‚ùå L·ªói t·∫°o accounts: {e}")
        return
    
    # Hi·ªÉn th·ªã th√¥ng tin accounts
    stats = manager.get_account_stats()
    print(f"üìä Th·ªëng k√™ accounts:")
    print(f"   - T·ªïng s·ªë: {stats['total_accounts']}")
    print(f"   - Premium: {stats['premium_accounts']}")
    print(f"   - Free: {stats['free_accounts']}")
    print()
    
    if stats['total_accounts'] == 0:
        print("‚ö†Ô∏è  Ch∆∞a c√≥ accounts n√†o ƒë∆∞·ª£c c·∫•u h√¨nh")
        print("üí° H√£y ch·ªânh s·ª≠a file accounts.json v·ªõi th√¥ng tin t√†i kho·∫£n th·ª±c c·ªßa b·∫°n")
        return
    
    # Hi·ªÉn th·ªã danh s√°ch accounts
    print("üìã Danh s√°ch accounts:")
    for i, acc in enumerate(manager.accounts, 1):
        status = "Premium" if acc.is_premium else "Free"
        active = "Active" if acc.is_active else "Inactive"
        print(f"   {i}. {acc.username} ({status}, {active})")
    print()
    
    # Test demo v·ªõi h√¨nh ·∫£nh demo
    demo_files = ['demo1.png', 'demo2.png', 'demo3.png']
    
    for demo_file in demo_files:
        try:
            # T√¨m file JSON t∆∞∆°ng ·ª©ng
            json_file = f"processed/{demo_file.replace('.png', '_pixels.json')}"
            
            # Ki·ªÉm tra file c√≥ t·ªìn t·∫°i
            try:
                with open(json_file, 'r') as f:
                    data = json.load(f)
                    pixel_count = len(data['pixels'])
                    print(f"üñºÔ∏è  Found demo: {demo_file} ({pixel_count} pixels)")
                    
                    # Estimate time savings
                    single_time = (pixel_count * 30) / 60  # minutes
                    multi_time = single_time / stats['total_accounts']
                    
                    print(f"   ‚è±Ô∏è  Single account: {single_time:.1f} ph√∫t")
                    print(f"   üöÄ Multi account ({stats['total_accounts']} acc): {multi_time:.1f} ph√∫t")
                    print(f"   üìà TƒÉng t·ªëc: {stats['total_accounts']:.0f}x nhanh h∆°n!")
                    print()
                    
                    # H·ªèi user c√≥ mu·ªën ch·∫°y demo kh√¥ng
                    choice = input(f"Ch·∫°y demo v·ªõi {demo_file}? (y/n): ").lower()
                    
                    if choice == 'y':
                        print(f"üéÆ ƒêang ch·∫°y multi-account bot demo...")
                        print("‚ö†Ô∏è  L∆ØU √ù: Demo n√†y s·∫Ω ch·∫°y th·∫≠t tr√™n wplace.live!")
                        confirm = input("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c? (yes/no): ").lower()
                        
                        if confirm == 'yes':
                            # T·∫°o multi-account bot
                            multi_bot = MultiAccountBot(headless=True, wait_time=30)
                            
                            def progress_callback(progress):
                                print(f"üìà Progress: {progress['current']}/{progress['total']} pixels")
                                for acc, count in progress['account_stats'].items():
                                    print(f"   {acc}: {count} pixels")
                            
                            # Ch·∫°y bot
                            result = multi_bot.run_pixel_script(
                                json_file,
                                start_x=1000,  # T·ªça ƒë·ªô demo
                                start_y=1000,
                                progress_callback=progress_callback
                            )
                            
                            # Hi·ªÉn th·ªã k·∫øt qu·∫£
                            if result['success']:
                                stats = result['stats']
                                print("‚úÖ Ho√†n th√†nh!")
                                print(f"   üéØ Pixels placed: {stats['placed_pixels']}/{stats['total_pixels']}")
                                print(f"   ‚è±Ô∏è  Th·ªùi gian: {stats['duration']:.1f} gi√¢y")
                                print(f"   üìä Success rate: {stats['success_rate']:.1f}%")
                                
                                print("\nüìà Th·ªëng k√™ theo account:")
                                for acc, count in stats['account_stats'].items():
                                    print(f"   {acc}: {count} pixels")
                            else:
                                print(f"‚ùå L·ªói: {result['error']}")
                            
                            # Cleanup
                            multi_bot.stop()
                            break
                        else:
                            print("‚ùå H·ªßy demo")
                    
            except FileNotFoundError:
                continue
                
        except Exception as e:
            print(f"‚ùå L·ªói v·ªõi {demo_file}: {e}")
            continue
    
    print("\nüéâ Demo ho√†n th√†nh!")
    print("üí° ƒê·ªÉ s·ª≠ d·ª•ng th·ª±c t·∫ø:")
    print("   1. C·∫≠p nh·∫≠t accounts.json v·ªõi t√†i kho·∫£n th·∫≠t")
    print("   2. Upload h√¨nh ·∫£nh qua web interface")
    print("   3. Ch·ªçn 'ƒêa t√†i kho·∫£n' trong Bot Control")

if __name__ == "__main__":
    demo_multi_account()